
========================================

>>> TEST findFunc

>>> BYTECODE_FILE wsBoot 1
FUNC test1, -10
END
FUNC test2, -20
END
FUNC test3, -30
END
FUNC init, wsInit.id
    VAR thisHandle, s32
    thisApp thisHandle
    VAR index, s8
    findFunc index, thisHandle, -30
    logTestData index
    findFunc index, thisHandle, -20
    logTestData index
    findFunc index, thisHandle, -15
    logTestData index
    findFunc index, thisHandle, -10
    logTestData index
    haltTest
END

>>> EXPECT 2 1 -1 0

========================================

>>> TEST findFunc_runningApp

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR xName, s32
    VAR xHandle, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    launch xHandle
    VAR index, s8
    findFunc index, xHandle, -10
    logTestData index
    setErrJmp handleErr1
    callRemote xHandle, index
    LBL handleErr1
    setErrJmp handleErr2
    findFunc index, xHandle, -20
    haltTest
    LBL handleErr2
    VAR err, s8
    err err
    logTestData err
    haltTest
END

>>> BYTECODE_FILE x 0
FUNC test1, -10
    quitApp
END
FUNC test2, -20
END

>>> EXPECT 0 12

========================================

>>> TEST findFunc_notApp

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR xName, s32
    VAR xHandle, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    setErrJmp handleErr
    VAR garbage, s8
    findFunc garbage, xHandle, -20
    haltTest
    LBL handleErr
    VAR err, s8
    err err
    logTestData err
    haltTest
END

>>> HEX_FILE x 0 0
00

>>> EXPECT 3

========================================

>>> TEST call_sequential

>>> BYTECODE_FILE wsBoot 1
FUNC test1
    logTestData 40
END
FUNC test2
    logTestData 50
END
FUNC test3
    logTestData 60
END
FUNC init, wsInit.id
    logTestData 1
    call test1
    logTestData 2
    call test2
    logTestData 3
    call test3
    logTestData 4
    haltTest
END

>>> EXPECT 1 40 2 50 3 60 4

========================================

>>> TEST call_nested

>>> BYTECODE_FILE wsBoot 1
FUNC test1
    logTestData 40
    call test2
    logTestData 45
END
FUNC test2
    logTestData 50
    call test3
    logTestData 55
END
FUNC test3
    logTestData 60
END
FUNC init, wsInit.id
    logTestData 1
    call test1
    logTestData 2
    haltTest
END

>>> EXPECT 1 40 50 60 55 45 2

========================================

>>> TEST call_invalidIndex

>>> BYTECODE_FILE wsBoot 1
FUNC test1
END
FUNC test2
END
FUNC test3
END
FUNC init, wsInit.id
    setErrJmp handleErr
    call 4
    haltTest
    LBL handleErr
    VAR err, s8
    err err
    logTestData err
    haltTest
END

>>> EXPECT 5

========================================

>>> TEST callRemote_sequential

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR xName, s32
    VAR xHandle, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    launch xHandle
    VAR index, s8
    logTestData 4
    findFunc index, xHandle, -10
    callRemote xHandle, index
    logTestData 5
    findFunc index, xHandle, -20
    callRemote xHandle, index
    logTestData 6
    findFunc index, xHandle, -30
    callRemote xHandle, index
    logTestData 7
    haltTest
END

>>> BYTECODE_FILE x 0
FUNC test1, -10
    logTestData 10
END
FUNC test2, -20
    logTestData 11
END
FUNC test3, -30
    logTestData 12
END

>>> EXPECT 4 10 5 11 6 12 7

========================================

>>> TEST callRemote_nested

>>> BYTECODE_FILE wsBoot 1
VAR xHandle, s32
FUNC init, wsInit.id
    VAR xName, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    launch xHandle
    VAR index, s8
    logTestData 10
    findFunc index, xHandle, -10
    callRemote xHandle, index
    logTestData 11
    haltTest
END
FUNC test, -15
    logTestData 30
    VAR index, s8
    findFunc index, xHandle, -20
    callRemote xHandle, index
    logTestData 31
END

>>> BYTECODE_FILE x 0
FUNC test1, -10
    logTestData 20
    VAR bootName, s32
    VAR bootHandle, s32
    newAlloc bootName, 0, 6
    wrtBuff bootName[0]:s8, appData[0]:s8, 6
    openFile bootHandle, bootName
    VAR index, s8
    findFunc index, bootHandle, -15
    callRemote bootHandle, index
    logTestData 21
END
FUNC test2, -20
    logTestData 40
END
APP_DATA
    DATA "wsBoot"
END

>>> EXPECT 10 20 30 40 31 21 11

========================================

>>> TEST callRemote_invalidIndex

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR xName, s32
    VAR xHandle, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    launch xHandle
    setErrJmp handleErr
    callRemote xHandle, 1
    haltTest
    LBL handleErr
    VAR err, s8
    err err
    logTestData err
    haltTest
END

>>> BYTECODE_FILE x 0
FUNC test, -10
END

>>> EXPECT 5

========================================

>>> TEST ret

>>> BYTECODE_FILE wsBoot 1
FUNC test
    logTestData 80
    ret
    logTestData 81
END
FUNC init, wsInit.id
    logTestData 70
    call test
    logTestData 71
    haltTest
END

>>> EXPECT 70 80 71

========================================

>>> TEST caller

>>> BYTECODE_FILE wsBoot 1
VAR xHandle, s32
FUNC init, wsInit.id
    call test
    VAR xName, s32
    newAlloc xName, 0, 1
    wrt xName[0]:s8, 120
    openFile xHandle, xName
    launch xHandle
    VAR index, s8
    findFunc index, xHandle, -2
    callRemote xHandle, index
    haltTest
END
FUNC test, -1
    VAR thisApp, s32
    VAR caller, s32
    thisApp thisApp
    caller caller
    VAR isEqual, s8
    equ isEqual, caller, thisApp
    logTestData isEqual
    equ isEqual, caller, xHandle
    logTestData isEqual
END

>>> BYTECODE_FILE x 0
FUNC test, -2
    VAR bootName, s32
    VAR bootHandle, s32
    newAlloc bootName, 0, 6
    wrtBuff bootName[0]:s8, appData[0]:s8, 6
    openFile bootHandle, bootName
    VAR index, s8
    findFunc index, bootHandle, -1
    callRemote bootHandle, index
END
APP_DATA
    DATA "wsBoot"
END

>>> EXPECT 1 0 0 1

========================================

>>> TEST funcIsGuarded

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR thisHandle, s32
    thisApp thisHandle
    VAR isGuarded, s8
    funcIsGuarded isGuarded, thisHandle, test1
    logTestData isGuarded
    funcIsGuarded isGuarded, thisHandle, test2
    logTestData isGuarded
END
FUNC test1
END
FUNC test2, guarded
END

>>> EXPECT 0 1

========================================

>>> TEST funcIsGuarded_invalidIndex

>>> BYTECODE_FILE wsBoot 1
FUNC init, wsInit.id
    VAR thisHandle, s32
    thisApp thisHandle
    setErrJmp handleErr
    VAR isGuarded, s8
    funcIsGuarded isGuarded, thisHandle, 3
    haltTest
    LBL handleErr
    VAR err, s8
    err err
    logTestData err
    haltTest
END
FUNC test1
END
FUNC test2, guarded
END

>>> EXPECT 5

========================================


